name: "Send ClickUp Notification Action"

description: "Fetches commit history (if possible) and sends a notification to ClickUp."

branding:
  icon: "bell"
  color: "orange"

inputs:
  clickup_api_token:
    description: "ClickUp API Token"
    required: true
  clickup_workspace_id:
    description: "ClickUp Workspace ID"
    required: true
  clickup_channel_id:
    description: "ClickUp Channel ID"
    required: true
  clickup_project_name:
    description: "ClickUp Project Name for the message"
    required: true

runs:
  using: "composite"
  steps:
    - name: Set Environment Variables
      shell: bash
      run: |
        echo "CLICKUP_API_TOKEN=${{ inputs.clickup_api_token }}" >> $GITHUB_ENV
        echo "CLICKUP_WORKSPACE_ID=${{ inputs.clickup_workspace_id }}" >> $GITHUB_ENV
        echo "CLICKUP_CHANNEL_ID=${{ inputs.clickup_channel_id }}" >> $GITHUB_ENV
        echo "CLICKUP_PROJECT_NAME=${{ inputs.clickup_project_name }}" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=${{ github.token }}" >> $GITHUB_ENV
        echo "OWNER=$GITHUB_REPOSITORY_OWNER" >> $GITHUB_ENV
        echo "REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 2)" >> $GITHUB_ENV
        echo "BRANCH_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV
        echo "CURRENT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
        echo "TRIGGERING_ACTOR=$GITHUB_ACTOR" >> $GITHUB_ENV
        echo "RUN_ID=$GITHUB_RUN_ID" >> $GITHUB_ENV
        echo "REPO=$GITHUB_REPOSITORY" >> $GITHUB_ENV

    - name: Fetch Duration
      id: duration
      shell: bash
      run: |
        STARTED_AT=""
        FORMATTED_DURATION="unknown"

        if command -v gh &> /dev/null; then
          STARTED_AT=$(gh api "repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" --jq '.run_started_at' 2>/dev/null || echo "")

          if [ -n "$STARTED_AT" ]; then
            COMPLETED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

            if command -v date &> /dev/null; then
              START_EPOCH=$(date -d "$STARTED_AT" +%s 2>/dev/null || echo "")
              END_EPOCH=$(date -d "$COMPLETED_AT" +%s 2>/dev/null || echo "")

              if [ -n "$START_EPOCH" ] && [ -n "$END_EPOCH" ]; then
                DURATION=$((END_EPOCH - START_EPOCH))
                FORMATTED_DURATION=$(printf "%02d:%02d" $((DURATION / 60)) $((DURATION % 60)))
              fi
            fi
          fi
        fi

        echo "FORMATTED_DURATION=${FORMATTED_DURATION}" >> $GITHUB_OUTPUT

    - name: Fetch Commits
      id: commits
      shell: bash
      run: |
        COMMIT_LIST_MD=""

        if command -v gh &> /dev/null; then
          WORKFLOW_ID=""
          WORKFLOW_ID=$(gh api "repos/${GITHUB_REPOSITORY_OWNER}/${REPO_NAME}/actions/runs/${GITHUB_RUN_ID}" --jq '.workflow_id' 2>/dev/null || echo "")

          if [ -n "$WORKFLOW_ID" ]; then
            PREVIOUS_SHA=""
            PREVIOUS_SHA=$(gh api "repos/${GITHUB_REPOSITORY_OWNER}/${REPO_NAME}/actions/workflows/${WORKFLOW_ID}/runs?branch=${GITHUB_REF_NAME}&status=success&per_page=1" \
              --jq '.workflow_runs[0].head_sha // empty' 2>/dev/null || echo "")

            if [ -n "$PREVIOUS_SHA" ] && [ "$PREVIOUS_SHA" != "$GITHUB_SHA" ]; then
              COMMITS_JSON=$(gh api "repos/${GITHUB_REPOSITORY_OWNER}/${REPO_NAME}/compare/${PREVIOUS_SHA}...${GITHUB_SHA}" \
                --jq '[.commits[] | {sha: .sha, message: .commit.message, author: .commit.author.name}]' 2>/dev/null || echo "[]")

              if [ "$COMMITS_JSON" != "[]" ] && [ -n "$COMMITS_JSON" ]; then
                COMMIT_COUNT=$(echo "$COMMITS_JSON" | jq 'length')

                if [ "$COMMIT_COUNT" -gt 0 ]; then
                  COMMIT_LIST_MD="\n\n**Change Log:**\n"

                  AUTHOR_LIST=()
                  AUTHOR_COMMITS_LIST=()
                  UNIQUE_KEYS=()

                  for ((i=0; i<$COMMIT_COUNT; i++)); do
                    RAW_AUTHOR=$(echo "$COMMITS_JSON" | jq -r ".[$i].author")
                    AUTHOR=$(echo "$RAW_AUTHOR" | tr -c '[:alnum:] ' ' ' | tr -s ' ')
                    AUTHOR=$(echo "$AUTHOR" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

                    if [ -z "$AUTHOR" ]; then
                      AUTHOR="Unknown Contributor"
                    fi

                    MESSAGE=$(echo "$COMMITS_JSON" | jq -r ".[$i].message" | sed -n '1p')

                    if [[ "$MESSAGE" =~ task\ \`([0-9a-z]+)\` ]]; then
                      TASK_ID="${BASH_REMATCH[1]}"
                      TASK_LINK="[\`${TASK_ID}\`](https://app.clickup.com/t/${TASK_ID})"
                      MESSAGE_CONTENT=$(echo "$MESSAGE" | sed "s/task \`${TASK_ID}\`//g" | sed -e 's/^[[:space:]]*//')
                      MESSAGE="${TASK_LINK} | ${MESSAGE_CONTENT}"
                    fi

                    KEY="${AUTHOR}::${MESSAGE}"
                    if [[ ! "$MESSAGE" =~ ^[Mm]erge ]]; then
                      IS_UNIQUE=true
                      for existing_key in "${UNIQUE_KEYS[@]}"; do
                        if [[ "$existing_key" == "$KEY" ]]; then
                          IS_UNIQUE=false
                          break
                        fi
                      done

                      if $IS_UNIQUE; then
                        UNIQUE_KEYS+=("$KEY")

                        FOUND=false
                        for j in "${!AUTHOR_LIST[@]}"; do
                          if [[ "${AUTHOR_LIST[$j]}" == "$AUTHOR" ]]; then
                            AUTHOR_COMMITS_LIST[$j]+="* $MESSAGE"$'\n'
                            FOUND=true
                            break
                          fi
                        done

                        if ! $FOUND; then
                          AUTHOR_LIST+=("$AUTHOR")
                          AUTHOR_COMMITS_LIST+=("* $MESSAGE"$'\n')
                        fi
                      fi
                    fi
                  done

                  for k in "${!AUTHOR_LIST[@]}"; do
                    AUTHOR="${AUTHOR_LIST[$k]}"
                    COMMITS="${AUTHOR_COMMITS_LIST[$k]}"
                    if [ -n "$COMMITS" ]; then
                      COMMIT_LIST_MD+=$'\n'"_*$AUTHOR:*_\n$COMMITS"
                    fi
                  done

                  if [[ "$COMMIT_LIST_MD" == "\n\n**Change Log:**\n" ]]; then
                    COMMIT_LIST_MD=""
                  fi
                fi
              fi
            fi
          fi
        fi

        COMMIT_FILE=$(mktemp)
        echo -e "$COMMIT_LIST_MD" > "$COMMIT_FILE"
        echo "COMMIT_FILE=$COMMIT_FILE" >> $GITHUB_OUTPUT

    - name: Send ClickUp Notification
      shell: bash
      run: |
        FORMATTED_DURATION="${{ steps.duration.outputs.FORMATTED_DURATION }}"
        COMMIT_FILE="${{ steps.commits.outputs.COMMIT_FILE }}"

        TRIGGERING_USER_NAME=$(curl -sf -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/users/${TRIGGERING_ACTOR}" | jq -r '.name // ""')

        if [ -z "$TRIGGERING_USER_NAME" ]; then
            TRIGGERING_USER_NAME="${TRIGGERING_ACTOR}"
        fi

        BASE_MESSAGE="ðŸš€ **${CLICKUP_PROJECT_NAME}** deployed to **${GITHUB_REF_NAME}**"
        DEPLOY_INFO="_Triggered by: ${TRIGGERING_USER_NAME}"
        [ "$FORMATTED_DURATION" != "unknown" ] && DEPLOY_INFO="${DEPLOY_INFO}, Done in: ${FORMATTED_DURATION}min_"
        [ "$FORMATTED_DURATION" == "unknown" ] && DEPLOY_INFO="${DEPLOY_INFO}_"

        FINAL_MESSAGE="${BASE_MESSAGE}\n\n${DEPLOY_INFO}"

        if [ -f "$COMMIT_FILE" ] && [ -s "$COMMIT_FILE" ]; then
          COMMIT_LIST=$(cat "$COMMIT_FILE")
          if [ -n "$COMMIT_LIST" ]; then
            FINAL_MESSAGE="${FINAL_MESSAGE}${COMMIT_LIST}"
          fi
        fi

        MESSAGE_FILE=$(mktemp)
        echo -e "$FINAL_MESSAGE" > "$MESSAGE_FILE"

        PAYLOAD_FILE=$(mktemp)
        jq -n --arg content "$(cat "$MESSAGE_FILE")" '{
          type: "message",
          content_format: "text/md",
          content: $content
        }' > "$PAYLOAD_FILE"

        RESPONSE_FILE=$(mktemp)
        HTTP_CODE=$(curl -s -o "$RESPONSE_FILE" -w "%{http_code}" \
          -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: ${{ inputs.clickup_api_token }}" \
          -d @"$PAYLOAD_FILE" \
          "https://api.clickup.com/api/v3/workspaces/${{ inputs.clickup_workspace_id }}/chat/channels/${{ inputs.clickup_channel_id }}/messages")

        rm -f "$MESSAGE_FILE" "$PAYLOAD_FILE" "$COMMIT_FILE" "$RESPONSE_FILE"

        if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
          echo "--- ClickUp notification sent successfully ---"
        else
          echo "::error::Failed to send notification to ClickUp. HTTP code: $HTTP_CODE"
          exit 1
        fi
