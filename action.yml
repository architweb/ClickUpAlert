name: 'Send ClickUp Notification Action'
description: 'Fetches commit history (if possible) and sends a notification to ClickUp.'

inputs:
  clickup_api_token:
    description: 'ClickUp API Token'
    required: true
  clickup_workspace_id:
    description: 'ClickUp Workspace ID'
    required: true
  clickup_channel_id:
    description: 'ClickUp Channel ID'
    required: true
  clickup_project_name:
    description: 'ClickUp Project Name for the message'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Set Environment Variables
      shell: bash
      run: |
        echo "CLICKUP_API_TOKEN=${{ inputs.clickup_api_token }}" >> $GITHUB_ENV
        echo "CLICKUP_WORKSPACE_ID=${{ inputs.clickup_workspace_id }}" >> $GITHUB_ENV
        echo "CLICKUP_CHANNEL_ID=${{ inputs.clickup_channel_id }}" >> $GITHUB_ENV
        echo "CLICKUP_PROJECT_NAME=${{ inputs.clickup_project_name }}" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=${{ github.token }}" >> $GITHUB_ENV
        echo "OWNER=$GITHUB_REPOSITORY_OWNER" >> $GITHUB_ENV
        echo "REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 2)" >> $GITHUB_ENV
        echo "BRANCH_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV
        echo "CURRENT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
        echo "TRIGGERING_ACTOR=$GITHUB_ACTOR" >> $GITHUB_ENV
        echo "RUN_ID=$GITHUB_RUN_ID" >> $GITHUB_ENV
        echo "REPO=$GITHUB_REPOSITORY" >> $GITHUB_ENV

    - name: Fetch Duration
      id: duration
      shell: bash
      run: |
        echo "--- Fetching duration ---"

        STARTED_AT=""
        FORMATTED_DURATION="unknown"

        if command -v gh &> /dev/null; then
          STARTED_AT=$(gh api "repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" --jq '.run_started_at' 2>/dev/null || echo "")

          if [ -n "$STARTED_AT" ]; then
            COMPLETED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

            if command -v date &> /dev/null; then
              START_EPOCH=$(date -d "$STARTED_AT" +%s 2>/dev/null || echo "")
              END_EPOCH=$(date -d "$COMPLETED_AT" +%s 2>/dev/null || echo "")

              if [ -n "$START_EPOCH" ] && [ -n "$END_EPOCH" ]; then
                DURATION=$((END_EPOCH - START_EPOCH))
                FORMATTED_DURATION=$(printf "%02d:%02d" $((DURATION / 60)) $((DURATION % 60)))
                echo "--- Run duration: ${FORMATTED_DURATION}min ---"
              fi
            fi
          fi
        fi

        echo "FORMATTED_DURATION=${FORMATTED_DURATION}" >> $GITHUB_OUTPUT

    - name: Fetch Commits
      id: commits
      shell: bash
      run: |
        echo "--- Starting commit fetching process ---"

        COMMIT_LIST_MD=""

        if command -v gh &> /dev/null; then
          # Get workflow ID
          WORKFLOW_ID=""
          WORKFLOW_ID=$(gh api "repos/${GITHUB_REPOSITORY_OWNER}/${REPO_NAME}/actions/runs/${GITHUB_RUN_ID}" --jq '.workflow_id' 2>/dev/null || echo "")

          if [ -n "$WORKFLOW_ID" ]; then
            echo "--- Found workflow ID for ${GITHUB_REF_NAME} ---"

            # Get previous successful run
            PREVIOUS_SHA=""
            PREVIOUS_SHA=$(gh api "repos/${GITHUB_REPOSITORY_OWNER}/${REPO_NAME}/actions/workflows/${WORKFLOW_ID}/runs?branch=${GITHUB_REF_NAME}&status=success&per_page=1" \
              --jq '.workflow_runs[0].head_sha // empty' 2>/dev/null || echo "")

            if [ -n "$PREVIOUS_SHA" ] && [ "$PREVIOUS_SHA" != "$GITHUB_SHA" ]; then
              echo "--- Fetching commits between ${PREVIOUS_SHA} and ${GITHUB_SHA} ---"

              # Get commits
              COMMITS_JSON=$(gh api "repos/${GITHUB_REPOSITORY_OWNER}/${REPO_NAME}/compare/${PREVIOUS_SHA}...${GITHUB_SHA}" \
                --jq '[.commits[] | {sha: .sha, message: .commit.message, author: .commit.author.name}]' 2>/dev/null || echo "[]")

              if [ "$COMMITS_JSON" != "[]" ] && [ -n "$COMMITS_JSON" ]; then
                echo "--- Successfully fetched commit data ---"

                # Process each commit individually to avoid command interpretation issues
                COMMIT_COUNT=$(echo "$COMMITS_JSON" | jq 'length')

                if [ "$COMMIT_COUNT" -gt 0 ]; then
                  COMMIT_LIST_MD="\n\n**Change Log:**\n"

                  declare -A AUTHOR_COMMITS
                  declare -A UNIQUE_MESSAGES

                  for ((i=0; i<$COMMIT_COUNT; i++)); do
                    AUTHOR=$(echo "$COMMITS_JSON" | jq -r ".[$i].author")
                    MESSAGE=$(echo "$COMMITS_JSON" | jq -r ".[$i].message" | sed -n '1p')

                    # Skip merge commits (starting with "Merge" or containing "merge")
                    KEY="${AUTHOR}::${MESSAGE}"
                    if [[ ! "$MESSAGE" =~ ^[Mm]erge ]] && [[ -z "${UNIQUE_MESSAGES["$KEY"]}" ]]; then
                      UNIQUE_MESSAGES["$KEY"]=1
                      AUTHOR_COMMITS["$AUTHOR"]+=$'* '"$MESSAGE"$'\n'
                    else
                      echo "Skipping merge commit: $MESSAGE"
                    fi
                  done

                  for AUTHOR in "${!AUTHOR_COMMITS[@]}"; do
                    COMMITS="${AUTHOR_COMMITS[$AUTHOR]}"
                    if [ -n "$COMMITS" ]; then
                      COMMIT_LIST_MD+=$'\n'"_*$AUTHOR:*_\n$COMMITS"
                    fi
                  done

                  # Check if we have any non-merge commits
                  if [[ "$COMMIT_LIST_MD" == "\n\n**Change Log:**\n" ]]; then
                    COMMIT_LIST_MD=""
                    echo "--- No non-merge commits found ---"
                  fi
                fi
              fi
            else
              echo "--- No new commits to fetch ---"
            fi
          else
            echo "--- Could not find workflow ID for ${GITHUB_REF_NAME} ---"
          fi
        fi

        # Create a file with the commit list to avoid issues with special characters
        COMMIT_FILE=$(mktemp)
        echo -e "$COMMIT_LIST_MD" > "$COMMIT_FILE"
        echo "COMMIT_FILE=$COMMIT_FILE" >> $GITHUB_OUTPUT

    - name: Send ClickUp Notification
      shell: bash
      run: |
        # Get outputs from previous steps
        FORMATTED_DURATION="${{ steps.duration.outputs.FORMATTED_DURATION }}"
        COMMIT_FILE="${{ steps.commits.outputs.COMMIT_FILE }}"

        echo "--- Preparing and sending ClickUp notification ---"

        TRIGGERING_USER_NAME=$(curl -sf -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/users/${TRIGGERING_ACTOR}" | jq -r '.name // ""')

        if [ -z "$TRIGGERING_USER_NAME" ]; then
            TRIGGERING_USER_NAME="${TRIGGERING_ACTOR}"
        fi

        # Basic message content
        BASE_MESSAGE="ðŸš€ **${CLICKUP_PROJECT_NAME}** deployed to **${GITHUB_REF_NAME}**"
        DEPLOY_INFO="_Triggered by: ${TRIGGERING_USER_NAME}"
        [ "$FORMATTED_DURATION" != "unknown" ] && DEPLOY_INFO="${DEPLOY_INFO}, Done in: ${FORMATTED_DURATION}min_"
        [ "$FORMATTED_DURATION" == "unknown" ] && DEPLOY_INFO="${DEPLOY_INFO}_"

        # Create the final message
        FINAL_MESSAGE="${BASE_MESSAGE}\n\n${DEPLOY_INFO}"

        # Add commit list if available
        if [ -f "$COMMIT_FILE" ] && [ -s "$COMMIT_FILE" ]; then
          COMMIT_LIST=$(cat "$COMMIT_FILE")
          if [ -n "$COMMIT_LIST" ]; then
            FINAL_MESSAGE="${FINAL_MESSAGE}${COMMIT_LIST}"
          fi
        fi

        # Save to file and show
        MESSAGE_FILE=$(mktemp)
        echo -e "$FINAL_MESSAGE" > "$MESSAGE_FILE"

        echo "Message content:"
        cat "$MESSAGE_FILE"

        # Create JSON payload without using variables directly in the JSON structure
        PAYLOAD_FILE=$(mktemp)
        jq -n --arg content "$(cat "$MESSAGE_FILE")" '{
          type: "message",
          content_format: "text/md",
          content: $content
        }' > "$PAYLOAD_FILE"

        echo "JSON payload:"
        cat "$PAYLOAD_FILE"

        # Send the notification
        RESPONSE_FILE=$(mktemp)
        HTTP_CODE=$(curl -s -o "$RESPONSE_FILE" -w "%{http_code}" \
          -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: ${{ inputs.clickup_api_token }}" \
          -d @"$PAYLOAD_FILE" \
          "https://api.clickup.com/api/v3/workspaces/${{ inputs.clickup_workspace_id }}/chat/channels/${{ inputs.clickup_channel_id }}/messages")

        echo "Response code: $HTTP_CODE"
        echo "Response body:"
        cat "$RESPONSE_FILE"

        # Clean up temporary files
        rm -f "$MESSAGE_FILE" "$PAYLOAD_FILE" "$COMMIT_FILE" "$RESPONSE_FILE"

        # Check for success
        if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
          echo "--- ClickUp notification sent successfully ---"
        else
          echo "::error::Failed to send notification to ClickUp. HTTP code: $HTTP_CODE"
          exit 1
        fi
