name: "📝 Fetch Commits"
description: "Fetches commit history and formats changelog"

inputs:
  full_commit_message:
    description: "Use the full commit message instead of the first line"
    required: false
    default: "false"

outputs:
  commit_file:
    description: "Path to the temporary file containing commit changelog"
    value: ${{ steps.commits.outputs.COMMIT_FILE }}

runs:
  using: "composite"
  steps:
    - name: Generate Changelog
      id: commits
      shell: bash
      run: |
        COMMIT_LIST_MD=""

        if command -v gh &> /dev/null; then
          WORKFLOW_ID=$(gh api "repos/${GITHUB_REPOSITORY_OWNER}/${REPO_NAME}/actions/runs/${GITHUB_RUN_ID}" --jq '.workflow_id' 2>/dev/null || echo "")

          if [ -n "$WORKFLOW_ID" ]; then
            PREVIOUS_SHA=$(gh api "repos/${GITHUB_REPOSITORY_OWNER}/${REPO_NAME}/actions/workflows/${WORKFLOW_ID}/runs?branch=${GITHUB_REF_NAME}&status=success&per_page=1" \
              --jq '.workflow_runs[0].head_sha // empty' 2>/dev/null || echo "")

            if [ -n "$PREVIOUS_SHA" ] && [ "$PREVIOUS_SHA" != "$GITHUB_SHA" ]; then
              COMMITS_JSON=$(gh api "repos/${GITHUB_REPOSITORY_OWNER}/${REPO_NAME}/compare/${PREVIOUS_SHA}...${GITHUB_SHA}" \
                --jq '[.commits[] | {sha: .sha, message: .commit.message, author: .commit.author.name}]' 2>/dev/null || echo "[]")

              if [ "$COMMITS_JSON" != "[]" ] && [ -n "$COMMITS_JSON" ]; then
                COMMIT_COUNT=$(echo "$COMMITS_JSON" | jq 'length')

                if [ "$COMMIT_COUNT" -gt 0 ]; then
                  COMMIT_LIST_MD="\n\n**Change Log:**\n"

                  AUTHOR_LIST=()
                  AUTHOR_COMMITS_LIST=()
                  UNIQUE_KEYS=()

                  for ((i=0; i<COMMIT_COUNT; i++)); do
                    RAW_AUTHOR=$(echo "$COMMITS_JSON" | jq -r ".[$i].author")
                    AUTHOR=$(echo "$RAW_AUTHOR" | tr -c '[:alnum:] ' ' ' | tr -s ' ')
                    AUTHOR=$(echo "$AUTHOR" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
                    [ -z "$AUTHOR" ] && AUTHOR="Unknown Contributor"

                    if [[ "${{ inputs.full_commit_message }}" == "true" ]]; then
                      RAW_MESSAGE=$(echo "$COMMITS_JSON" | jq -r ".[$i].message")

                      FORMATTED_MESSAGE=$(echo "$RAW_MESSAGE" | sed -E "s/ctask \`([A-Za-z0-9\-]+)\`/[\`\1\`](https:\/\/app.clickup.com\/t\/${CLICKUP_WORKSPACE_ID}\/\1)/g")
                      FORMATTED_MESSAGE=$(echo "$FORMATTED_MESSAGE" | sed -E "s/task \`([0-9a-z]+)\`/[\`\1\`](https:\/\/app.clickup.com\/t\/\1)/g")

                      HEADER_LINE=$(echo "$FORMATTED_MESSAGE" | sed -n '1p')
                      BODY_LINES=$(echo "$FORMATTED_MESSAGE" | sed '1d')

                      if echo "$HEADER_LINE" | grep -Eq '^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([^)]+\))?(!)?:'; then
                        HEADER_LINE="**${HEADER_LINE}**"
                      fi

                      if echo "$BODY_LINES" | grep -qE '^\s*[\*\-\+]'; then

                        INDENTED_BODY=$(echo "$BODY_LINES" | sed -E 's/^\s*([\*\-\+])/    \1   /')
                      else
                        INDENTED_BODY=$(echo "$BODY_LINES" | sed 's/^/    /')
                      fi

                      FINAL_COMMIT_BLOCK="*   ${HEADER_LINE}"
                      [ -n "$BODY_LINES" ] && FINAL_COMMIT_BLOCK="${FINAL_COMMIT_BLOCK}"$'\n'"${INDENTED_BODY}"

                    else
                      MESSAGE=$(echo "$COMMITS_JSON" | jq -r ".[$i].message" | sed -n '1p')

                      MESSAGE=$(echo "$MESSAGE" | sed -E "s/ctask \`([A-Za-z0-9\-]+)\`/[\`\1\`](https:\/\/app.clickup.com\/t\/${CLICKUP_WORKSPACE_ID}\/\1)/g")
                      MESSAGE=$(echo "$MESSAGE" | sed -E "s/task \`([0-9a-z]+)\`/[\`\1\`](https:\/\/app.clickup.com\/t\/\1)/g")

                      if echo "$MESSAGE" | grep -qE '^((build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([^)]+\))?(!)?:)'; then
                        PREFIX=$(echo "$MESSAGE" | grep -oE '^((build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([^)]+\))?(!)?:)')
                        REST="${MESSAGE#$PREFIX }"
                        MESSAGE="**${PREFIX}** ${REST}"
                      fi

                      FINAL_COMMIT_BLOCK="* ${MESSAGE}"
                    fi

                    KEY="${AUTHOR}::${FINAL_COMMIT_BLOCK}"
                    if [[ ! "$FINAL_COMMIT_BLOCK" =~ ^[Mm]erge ]]; then
                      IS_UNIQUE=true
                      for existing_key in "${UNIQUE_KEYS[@]}"; do
                        if [[ "$existing_key" == "$KEY" ]]; then
                          IS_UNIQUE=false
                          break
                        fi
                      done

                      if $IS_UNIQUE; then
                        UNIQUE_KEYS+=("$KEY")

                        FOUND=false
                        for j in "${!AUTHOR_LIST[@]}"; do
                          if [[ "${AUTHOR_LIST[$j]}" == "$AUTHOR" ]]; then
                            AUTHOR_COMMITS_LIST[$j]+="${FINAL_COMMIT_BLOCK}"$'\n'
                            FOUND=true
                            break
                          fi
                        done

                        if ! $FOUND; then
                          AUTHOR_LIST+=("$AUTHOR")
                          AUTHOR_COMMITS_LIST+=("${FINAL_COMMIT_BLOCK}"$'\n')
                        fi
                      fi
                    fi
                  done

                  for k in "${!AUTHOR_LIST[@]}"; do
                    AUTHOR="${AUTHOR_LIST[$k]}"
                    COMMITS="${AUTHOR_COMMITS_LIST[$k]}"
                    if [ -n "$COMMITS" ]; then
                      COMMIT_LIST_MD+=$'\n'"_*$AUTHOR:*_\n$COMMITS"
                    fi
                  done

                  if [[ "$COMMIT_LIST_MD" == "\n\n**Change Log:**\n" ]]; then
                    COMMIT_LIST_MD=""
                  fi
                fi
              fi
            fi
          fi
        fi

        COMMIT_FILE=$(mktemp)
        echo -e "$COMMIT_LIST_MD" > "$COMMIT_FILE"
        echo "COMMIT_FILE=$COMMIT_FILE" >> $GITHUB_OUTPUT
